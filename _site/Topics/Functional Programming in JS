Functional Programming in JS
  - philosophy 
    > create small functions and put them together for big results
  - Common Tools, Patterns, & Assumptions:
    > Composition
    > Immutability
    > Recursion
      ~ Declarative (vs. Imperative)
      ~ aka easier to understand b/c we express what solution should look like

Callbacks: 
  - function that return functions that return other functions
  - callbacks give up control as to how the function gets called
  - Passing in a function by variable vs. directly are equivalent

Currying:
  - Necessitating that a function only accepts one parameter and using nested functions to accommodate apply parameters
  - This implementation of closures really benefits code reuse and the flexibility of functions
  - The purpose of curried functions to aid the convenience of putting things together
  - Curried function order matters! // order impacts a function's flexibility
  - Curried functions can be particularly nice to use if you are implementing particular FP methods (i.e. map, filter, reduce)
  - Main purpose of currying is to partially apply arguments on the fly and effectively implement increasingly more complicated & specific functions in bit-size pieces
  - Keep things from getting messy with variable assignments & good descriptive names
  - Function Composition:	
		function compose (firstFn, secondFn) {
			return function (x) {
				return secondFn( firstFn(x) )
			}
		}
  - Alternative to manual approach >> "Partial Application" >> fn.bind(null, x)

Asynchronous Callbacks:
  - An asynchronous function will not run until the current block of code (usually script tag) has completed running first, no matter how many or few milliseconds we prescribed to setTimeout
  - When you run multiple lines of code in JS, you can be absolutely certain asynchronous code only be injected at the end of the queue
  -- Keep an eyeon when an asynchronous callback reaches the queue in comparison to other asysnc callbacks
  - train of thought: 
    > JS can only run one line at a time & if something in the queue is holding everything else up behind it they must wait

Promises: